
import discord
from discord.ext import commands
import asyncio
import random
import os
from datetime import datetime, timedelta

# Bot setup with all necessary intents
intents = discord.Intents.default()
intents.message_content = True
intents.members = True
intents.guilds = True

bot = commands.Bot(command_prefix='!', intents=intents)

@bot.event
async def on_ready():
    print(f'{bot.user} ƒë√£ s·∫µn s√†ng ho·∫°t ƒë·ªông!')
    
    # Thi·∫øt l·∫≠p tr·∫°ng th√°i streaming
    activity = discord.Streaming(
        name="YouTube Stream",
        url="https://www.youtube.com/watch?si=k8w_-I5jc-L-mwxs&v=bJ_N6o6WRM4&feature=youtu.be"
    )
    await bot.change_presence(activity=activity, status=discord.Status.online)
    
    try:
        synced = await bot.tree.sync()
        print(f'ƒê√£ ƒë·ªìng b·ªô {len(synced)} slash commands')
    except Exception as e:
        print(f'L·ªói ƒë·ªìng b·ªô commands: {e}')

# MODERATION COMMANDS

@bot.tree.command(name="mute", description="T·∫Øt ti·∫øng th√†nh vi√™n")
async def mute(interaction: discord.Interaction, member: discord.Member, duration: int = 60, reason: str = "Kh√¥ng c√≥ l√Ω do"):
    if not interaction.user.guild_permissions.moderate_members:
        await interaction.response.send_message("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!", ephemeral=True)
        return
    
    try:
        until = discord.utils.utcnow() + timedelta(minutes=duration)
        await member.timeout(until, reason=reason)
        
        embed = discord.Embed(
            title="üîá Th√†nh vi√™n ƒë√£ b·ªã t·∫Øt ti·∫øng",
            description=f"**Th√†nh vi√™n:** {member.mention}\n**Th·ªùi gian:** {duration} ph√∫t\n**L√Ω do:** {reason}\n**B·ªüi:** {interaction.user.mention}",
            color=discord.Color.orange()
        )
        await interaction.response.send_message(embed=embed)
    except Exception as e:
        await interaction.response.send_message(f"L·ªói khi t·∫Øt ti·∫øng: {e}", ephemeral=True)

@bot.tree.command(name="unmute", description="B·ªè t·∫Øt ti·∫øng th√†nh vi√™n")
async def unmute(interaction: discord.Interaction, member: discord.Member):
    if not interaction.user.guild_permissions.moderate_members:
        await interaction.response.send_message("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!", ephemeral=True)
        return
    
    try:
        await member.timeout(None)
        embed = discord.Embed(
            title="üîä ƒê√£ b·ªè t·∫Øt ti·∫øng",
            description=f"**Th√†nh vi√™n:** {member.mention}\n**B·ªüi:** {interaction.user.mention}",
            color=discord.Color.green()
        )
        await interaction.response.send_message(embed=embed)
    except Exception as e:
        await interaction.response.send_message(f"L·ªói khi b·ªè t·∫Øt ti·∫øng: {e}", ephemeral=True)

@bot.tree.command(name="kick", description="ƒêu·ªïi th√†nh vi√™n kh·ªèi server")
async def kick(interaction: discord.Interaction, member: discord.Member, reason: str = "Kh√¥ng c√≥ l√Ω do"):
    if not interaction.user.guild_permissions.kick_members:
        await interaction.response.send_message("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!", ephemeral=True)
        return
    
    try:
        await member.kick(reason=reason)
        embed = discord.Embed(
            title="üë¢ Th√†nh vi√™n ƒë√£ b·ªã ƒëu·ªïi",
            description=f"**Th√†nh vi√™n:** {member.mention}\n**L√Ω do:** {reason}\n**B·ªüi:** {interaction.user.mention}",
            color=discord.Color.red()
        )
        await interaction.response.send_message(embed=embed)
    except Exception as e:
        await interaction.response.send_message(f"L·ªói khi ƒëu·ªïi th√†nh vi√™n: {e}", ephemeral=True)

@bot.tree.command(name="ban", description="C·∫•m th√†nh vi√™n kh·ªèi server")
async def ban(interaction: discord.Interaction, member: discord.Member, reason: str = "Kh√¥ng c√≥ l√Ω do"):
    if not interaction.user.guild_permissions.ban_members:
        await interaction.response.send_message("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!", ephemeral=True)
        return
    
    try:
        await member.ban(reason=reason)
        embed = discord.Embed(
            title="üî® Th√†nh vi√™n ƒë√£ b·ªã c·∫•m",
            description=f"**Th√†nh vi√™n:** {member.mention}\n**L√Ω do:** {reason}\n**B·ªüi:** {interaction.user.mention}",
            color=discord.Color.dark_red()
        )
        await interaction.response.send_message(embed=embed)
    except Exception as e:
        await interaction.response.send_message(f"L·ªói khi c·∫•m th√†nh vi√™n: {e}", ephemeral=True)

@bot.tree.command(name="unban", description="B·ªè c·∫•m th√†nh vi√™n")
async def unban(interaction: discord.Interaction, user_id: str, reason: str = "Kh√¥ng c√≥ l√Ω do"):
    if not interaction.user.guild_permissions.ban_members:
        await interaction.response.send_message("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!", ephemeral=True)
        return
    
    try:
        user = await bot.fetch_user(int(user_id))
        await interaction.guild.unban(user, reason=reason)
        embed = discord.Embed(
            title="‚úÖ ƒê√£ b·ªè c·∫•m th√†nh vi√™n",
            description=f"**Th√†nh vi√™n:** {user.mention}\n**L√Ω do:** {reason}\n**B·ªüi:** {interaction.user.mention}",
            color=discord.Color.green()
        )
        await interaction.response.send_message(embed=embed)
    except Exception as e:
        await interaction.response.send_message(f"L·ªói khi b·ªè c·∫•m: {e}", ephemeral=True)

# ROLE MANAGEMENT COMMANDS

@bot.tree.command(name="addrole", description="Th√™m role cho th√†nh vi√™n")
async def add_role(interaction: discord.Interaction, member: discord.Member, role: discord.Role):
    if not interaction.user.guild_permissions.manage_roles:
        await interaction.response.send_message("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!", ephemeral=True)
        return
    
    try:
        await member.add_roles(role)
        embed = discord.Embed(
            title="‚úÖ ƒê√£ th√™m role",
            description=f"**Th√†nh vi√™n:** {member.mention}\n**Role:** {role.mention}\n**B·ªüi:** {interaction.user.mention}",
            color=discord.Color.green()
        )
        await interaction.response.send_message(embed=embed)
    except Exception as e:
        await interaction.response.send_message(f"L·ªói khi th√™m role: {e}", ephemeral=True)

@bot.tree.command(name="removerole", description="X√≥a role kh·ªèi th√†nh vi√™n")
async def remove_role(interaction: discord.Interaction, member: discord.Member, role: discord.Role):
    if not interaction.user.guild_permissions.manage_roles:
        await interaction.response.send_message("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!", ephemeral=True)
        return
    
    try:
        await member.remove_roles(role)
        embed = discord.Embed(
            title="‚ûñ ƒê√£ x√≥a role",
            description=f"**Th√†nh vi√™n:** {member.mention}\n**Role:** {role.mention}\n**B·ªüi:** {interaction.user.mention}",
            color=discord.Color.orange()
        )
        await interaction.response.send_message(embed=embed)
    except Exception as e:
        await interaction.response.send_message(f"L·ªói khi x√≥a role: {e}", ephemeral=True)

@bot.tree.command(name="autorole", description="T·ª± ƒë·ªông th√™m role khi th√†nh vi√™n m·ªõi v√†o server")
async def set_autorole(interaction: discord.Interaction, role: discord.Role):
    if not interaction.user.guild_permissions.manage_roles:
        await interaction.response.send_message("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!", ephemeral=True)
        return
    
    # L∆∞u autorole v√†o file ho·∫∑c database (·ªü ƒë√¢y d√πng bi·∫øn to√†n c·ª•c ƒë∆°n gi·∫£n)
    global autorole_data
    if 'autorole_data' not in globals():
        autorole_data = {}
    
    autorole_data[interaction.guild.id] = role.id
    
    embed = discord.Embed(
        title="ü§ñ ƒê√£ thi·∫øt l·∫≠p Auto Role",
        description=f"**Role:** {role.mention}\n**Server:** {interaction.guild.name}",
        color=discord.Color.blue()
    )
    await interaction.response.send_message(embed=embed)

@bot.event
async def on_member_join(member):
    if 'autorole_data' in globals() and member.guild.id in autorole_data:
        role_id = autorole_data[member.guild.id]
        role = member.guild.get_role(role_id)
        if role:
            try:
                await member.add_roles(role)
            except:
                pass

# MESSAGE MANAGEMENT COMMANDS

@bot.tree.command(name="clear", description="X√≥a tin nh·∫Øn")
async def clear_messages(interaction: discord.Interaction, amount: int):
    if not interaction.user.guild_permissions.manage_messages:
        await interaction.response.send_message("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!", ephemeral=True)
        return
    
    if amount > 100:
        await interaction.response.send_message("Kh√¥ng th·ªÉ x√≥a qu√° 100 tin nh·∫Øn c√πng l√∫c!", ephemeral=True)
        return
    
    try:
        deleted = await interaction.channel.purge(limit=amount)
        embed = discord.Embed(
            title="üóëÔ∏è ƒê√£ x√≥a tin nh·∫Øn",
            description=f"**S·ªë l∆∞·ª£ng:** {len(deleted)} tin nh·∫Øn\n**B·ªüi:** {interaction.user.mention}",
            color=discord.Color.red()
        )
        await interaction.response.send_message(embed=embed, delete_after=5)
    except Exception as e:
        await interaction.response.send_message(f"L·ªói khi x√≥a tin nh·∫Øn: {e}", ephemeral=True)

# NICKNAME MANAGEMENT

@bot.tree.command(name="nick", description="ƒê·ªïi bi·ªát danh c·ªßa th√†nh vi√™n")
async def change_nickname(interaction: discord.Interaction, member: discord.Member, nickname: str = None):
    if not interaction.user.guild_permissions.manage_nicknames:
        await interaction.response.send_message("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!", ephemeral=True)
        return
    
    try:
        old_nick = member.display_name
        await member.edit(nick=nickname)
        
        embed = discord.Embed(
            title="üìù ƒê√£ ƒë·ªïi bi·ªát danh",
            description=f"**Th√†nh vi√™n:** {member.mention}\n**T√™n c≈©:** {old_nick}\n**T√™n m·ªõi:** {nickname or member.name}\n**B·ªüi:** {interaction.user.mention}",
            color=discord.Color.blue()
        )
        await interaction.response.send_message(embed=embed)
    except Exception as e:
        await interaction.response.send_message(f"L·ªói khi ƒë·ªïi bi·ªát danh: {e}", ephemeral=True)

# GIVEAWAY SYSTEM

giveaways = {}

@bot.tree.command(name="giveaway", description="T·∫°o giveaway")
async def create_giveaway(interaction: discord.Interaction, duration: int, winners: int, prize: str):
    if not interaction.user.guild_permissions.manage_guild:
        await interaction.response.send_message("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!", ephemeral=True)
        return
    
    embed = discord.Embed(
        title="üéâ GIVEAWAY üéâ",
        description=f"**Ph·∫ßn th∆∞·ªüng:** {prize}\n**S·ªë ng∆∞·ªùi th·∫Øng:** {winners}\n**Th·ªùi gian:** {duration} ph√∫t\n**ƒê·ªÉ tham gia:** React üéâ",
        color=discord.Color.gold(),
        timestamp=discord.utils.utcnow()
    )
    embed.set_footer(text=f"K·∫øt th√∫c sau {duration} ph√∫t")
    
    await interaction.response.send_message(embed=embed)
    message = await interaction.original_response()
    await message.add_reaction("üéâ")
    
    # L∆∞u th√¥ng tin giveaway
    end_time = discord.utils.utcnow() + timedelta(minutes=duration)
    giveaways[message.id] = {
        'channel_id': interaction.channel.id,
        'prize': prize,
        'winners': winners,
        'end_time': end_time,
        'host': interaction.user.id
    }
    
    # Ch·ªù v√† k·∫øt th√∫c giveaway
    await asyncio.sleep(duration * 60)
    await end_giveaway(message.id)

async def end_giveaway(message_id):
    if message_id not in giveaways:
        return
    
    giveaway_data = giveaways[message_id]
    channel = bot.get_channel(giveaway_data['channel_id'])
    
    try:
        message = await channel.fetch_message(message_id)
        reaction = discord.utils.get(message.reactions, emoji="üéâ")
        
        if reaction and reaction.count > 1:
            users = [user async for user in reaction.users() if not user.bot]
            
            if len(users) >= giveaway_data['winners']:
                winners = random.sample(users, giveaway_data['winners'])
                winner_mentions = [winner.mention for winner in winners]
                
                embed = discord.Embed(
                    title="üéâ GIVEAWAY K·∫æT TH√öC üéâ",
                    description=f"**Ph·∫ßn th∆∞·ªüng:** {giveaway_data['prize']}\n**Ng∆∞·ªùi th·∫Øng:** {', '.join(winner_mentions)}",
                    color=discord.Color.green()
                )
            else:
                embed = discord.Embed(
                    title="üéâ GIVEAWAY K·∫æT TH√öC üéâ",
                    description=f"**Ph·∫ßn th∆∞·ªüng:** {giveaway_data['prize']}\n**K·∫øt qu·∫£:** Kh√¥ng ƒë·ªß ng∆∞·ªùi tham gia",
                    color=discord.Color.red()
                )
        else:
            embed = discord.Embed(
                title="üéâ GIVEAWAY K·∫æT TH√öC üéâ",
                description=f"**Ph·∫ßn th∆∞·ªüng:** {giveaway_data['prize']}\n**K·∫øt qu·∫£:** Kh√¥ng c√≥ ai tham gia",
                color=discord.Color.red()
            )
        
        await channel.send(embed=embed)
        
    except Exception as e:
        print(f"L·ªói khi k·∫øt th√∫c giveaway: {e}")
    
    # X√≥a giveaway kh·ªèi dictionary
    del giveaways[message_id]

# HELP COMMAND

@bot.tree.command(name="help", description="Hi·ªÉn th·ªã danh s√°ch l·ªánh")
async def help_command(interaction: discord.Interaction):
    embed = discord.Embed(
        title="üìö Danh s√°ch l·ªánh Bot",
        color=discord.Color.blue()
    )
    
    embed.add_field(
        name="üõ°Ô∏è Moderation",
        value="`/mute` - T·∫Øt ti·∫øng th√†nh vi√™n\n`/unmute` - B·ªè t·∫Øt ti·∫øng\n`/kick` - ƒêu·ªïi th√†nh vi√™n\n`/ban` - C·∫•m th√†nh vi√™n\n`/unban` - B·ªè c·∫•m th√†nh vi√™n",
        inline=False
    )
    
    embed.add_field(
        name="üë• Role Management",
        value="`/addrole` - Th√™m role\n`/removerole` - X√≥a role\n`/autorole` - Thi·∫øt l·∫≠p auto role",
        inline=False
    )
    
    embed.add_field(
        name="üí¨ Message Management",
        value="`/clear` - X√≥a tin nh·∫Øn\n`/nick` - ƒê·ªïi bi·ªát danh",
        inline=False
    )
    
    embed.add_field(
        name="üéâ Giveaway",
        value="`/giveaway` - T·∫°o giveaway",
        inline=False
    )
    
    await interaction.response.send_message(embed=embed)

import os
bot.run(os.getenv("DISCORD_TOKEN"))
